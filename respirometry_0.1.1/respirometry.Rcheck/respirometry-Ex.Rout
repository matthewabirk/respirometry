
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "respirometry"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "respirometry-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('respirometry')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Q10")
> ### * Q10
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Q10
> ### Title: Parameters of Q10 Temperature Coefficient
> ### Aliases: Q10
> 
> ### ** Examples
> 
> Q10(R2 = 10, R1 = 5, T2 = 20, T1 = 10) # Returns Q10; = 2
$Q10
[1] 2

> Q10(Q10 = 2.66, R1 = 5, T2 = 20, T1 = 10) # Returns R2; = 13.3
$R2
[1] 13.3

> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Q10", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RQ")
> ### * RQ
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RQ
> ### Title: Calculate respiratory quotient
> ### Aliases: RQ
> 
> ### ** Examples
> 
> o2_observations = c(21, 18, 14.5, 7)
> pH_observations = c(8.05, 7.98, 7.86, 7.65)
> TA_observations = c(2222, 2219, 2208, 2214)
> 
> RQ(o2 = o2_observations, o2_unit = 'kPa', pH = pH_observations,
+ TA = TA_observations, temp = 20, sal = 33)
[1] 0.960987 1.097911 1.006876
> 
> DIC_observations = c(2222, 2250, 2284, 2355)
> RQ(o2 = o2_observations, o2_unit = 'kPa', DIC = DIC_observations)
[1] 0.9440819 0.9826159 0.9575688
> 
> RQ(o2 = o2_observations, o2_unit = 'kPa', pH = pH_observations, TA = 2032)
[1] 1.227301 1.619191 1.096923
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RQ", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("co2_add")
> ### * co2_add
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: co2_add
> ### Title: Calculate CO2 to add to water
> ### Aliases: co2_add
> 
> ### ** Examples
> 
> # I want the 50 L respirometer to have a pCO2 = 1000 uatm. It currently has a pH of 7.88.
> # How many moles of CO2 gas should be added to the water to reach my desired pCO2?
> co2_add(goal_pco2 = 1000, start_pH = 7.88, vol = 50)
[1] 0.004002866
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("co2_add", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("co2_flush")
> ### * co2_flush
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: co2_flush
> ### Title: Calculate CO2 to add to flush reservoir
> ### Aliases: co2_flush
> 
> ### ** Examples
> 
> # I want the respirometer to have a pCO2 = 1000 uatm. It currently has a pH of 7.6 and is 90 L.
> # If I have a 200 L reservoir with pH = 7.9 seawater, how much CO2 do I need
> # to add to the flush reservoir?
> co2_flush(goal_pco2 = 1000, resp_pH = 7.6, resp_vol = 90, flush_pH = 7.9, flush_vol = 200)
[1] 0.01705474
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("co2_flush", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("co2_rate")
> ### * co2_rate
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: co2_rate
> ### Title: Calculate CO2 to add to a respirometer intake flow
> ### Aliases: co2_rate
> 
> ### ** Examples
> 
> # I want the respirometer to have a pCO2 = 1000 uatm. How much CO2 per minute do I need
> # to add to the intake flow if the ambient pH is 8.1 and it is flowing at 3 LPM?
> co2_rate(goal_pco2 = 1000, init_pH = 8.1, flow_rate = 3)
[1] 0.0006154924
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("co2_rate", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("conv_NH4")
> ### * conv_NH4
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: conv_NH4
> ### Title: Convert between units of ammonium
> ### Aliases: conv_NH4
> 
> ### ** Examples
> 
> conv_NH4(n_waste = 100)
$umol_NH4
[1] 100

$mg_NH4
[1] 1.803846

$mg_N
[1] 1.40067

> conv_NH4(n_waste = 100, from = 'mg_N')
$umol_NH4
[1] 7139.44

$mg_NH4
[1] 128.7845

$mg_N
[1] 100

> conv_NH4(n_waste = 100, from = 'mg_N', to = 'umol_NH4')
[1] 7139.44
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("conv_NH4", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("conv_o2")
> ### * conv_o2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: conv_o2
> ### Title: Convert between units of oxygen partial pressure and
> ###   concentration
> ### Aliases: conv_o2
> 
> ### ** Examples
> 
> conv_o2(o2 = 50)
$percent_a.s.
[1] 50

$percent_o2
[1] 10.473

$hPa
[1] 104.2707

$kPa
[1] 10.42707

$torr
[1] 78.20943

$mmHg
[1] 78.20943

$inHg
[1] 3.079111

$mg_per_l
[1] 3.375541

$umol_per_l
[1] 105.4896

$ml_per_l
[1] 2.584208

$mg_per_kg
[1] 3.298549

$umol_per_kg
[1] 103.0835

$ml_per_kg
[1] 2.525265

> conv_o2(o2 = 1:50, from = "umol_per_l", to = "ml_per_l", temp = 10, sal = 0,
+ 	atm_pres = 1100)
 [1] 0.02143404 0.04286807 0.06430211 0.08573615 0.10717019 0.12860423
 [7] 0.15003827 0.17147231 0.19290634 0.21434038 0.23577442 0.25720846
[13] 0.27864250 0.30007655 0.32151059 0.34294463 0.36437867 0.38581271
[19] 0.40724675 0.42868079 0.45011484 0.47154888 0.49298292 0.51441696
[25] 0.53585101 0.55728505 0.57871910 0.60015314 0.62158718 0.64302123
[31] 0.66445527 0.68588932 0.70732336 0.72875741 0.75019145 0.77162550
[37] 0.79305955 0.81449359 0.83592764 0.85736169 0.87879573 0.90022978
[43] 0.92166383 0.94309788 0.96453193 0.98596598 1.00740002 1.02883407
[49] 1.05026812 1.07170217
> conv_o2()[c('mmHg','kPa')]
$mmHg
[1] 156.4189

$kPa
[1] 20.85413

> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("conv_o2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("correct_bubble")
> ### * correct_bubble
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: correct_bubble
> ### Title: Adjust respirometer volume for bubbles
> ### Aliases: correct_bubble
> 
> ### ** Examples
> 
> correct_bubble(resp_vol = 50, bubble_vol = 10) # a 10 mL bubble makes a huge difference!
[1] 292.6469
> 
> correct_bubble(resp_vol = 50, bubble_vol = 1, temp = 10, sal = 0) 
[1] 63.79872
> # in calculating MO2, a volume of 63.8 L should be used rather than the true 50 L.
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("correct_bubble", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("flush_carb")
> ### * flush_carb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: flush_carb
> ### Title: Estimate carbonate chemistry after a flush
> ### Aliases: flush_carb
> 
> ### ** Examples
> 
> flush_carb(resp_vol = 90, flow_rate = 10, duration = 3, resp_pH = 7.8, flush_pH = 8.1)
  flag  S  T Patm P       pH          CO2     fCO2     pCO2  fCO2pot  pCO2pot
1   15 35 25    1 0 7.895998 1.702895e-05 599.7824 601.7029 599.8732 601.7939
  fCO2insitu pCO2insitu        HCO3          CO3         DIC         ALK
1   599.7824   601.7029 0.001905606 0.0001622109 0.002084846 0.002303659
  OmegaAragonite OmegaCalcite
1       2.574368      3.90568
> 
> # What will be the pH in the respirometer after this flush?
> flush_carb(resp_vol = 90, flow_rate = 10, duration = 3, resp_pH = 7.8, flush_pH = 8.1)$pH
[1] 7.895998
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("flush_carb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("flush_o2")
> ### * flush_o2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: flush_o2
> ### Title: Estimate dissolved O2 after a flush
> ### Aliases: flush_o2
> 
> ### ** Examples
> 
> # What will be the pO2 in the respirometer after this flush?
> flush_o2(resp_vol = 90, flow_rate = 10, duration = 3, resp_o2 = 15, flush_o2 = 21)
perc_fresh 
  16.70081 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("flush_o2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("flush_water")
> ### * flush_water
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: flush_water
> ### Title: Find percent of water exchanged after a flush
> ### Aliases: flush_water
> 
> ### ** Examples
> 
> # What proportion of a 90 L respirometer is exchanged after 20 minutes of flow at 2 LPM?
> flush_water(vol = 90, flow_rate = 2, duration = 20)
$perc_fresh
[1] 0.3588196

> 
> # Would it be worth it to extend the flush another five minutes? How much would that
> # improve the exchange?
> flush_water(vol = 90, flow_rate = 2, duration = 20, plot = TRUE)
$perc_fresh
[1] 0.3588196

> # Another five minutes would increase exchange by nearly 10%.
> # Perhaps that's worth the extra time...
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("flush_water", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("goal_flush_pH")
> ### * goal_flush_pH
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: goal_flush_pH
> ### Title: Calculate goal pH of a flush reservoir to achieve the post-flush
> ###   goal pCO2
> ### Aliases: goal_flush_pH
> 
> ### ** Examples
> 
> # I want the respirometer to have a pCO2 = 1000 uatm. It currently has a pH of 7.6 and is 90 L.
> # If I have a 200 L reservoir which will be drained completely, what do I want
> # the pH of the reservoir to be?
> goal_flush_pH(goal_pco2 = 1000, resp_pH = 7.6, resp_vol = 90, flush_vol = 200)
[1] 7.715152
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("goal_flush_pH", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("guess_TA")
> ### * guess_TA
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: guess_TA
> ### Title: Estimate total alkalinity from salinity
> ### Aliases: guess_TA
> 
> ### ** Examples
> 
> guess_TA(temp = 22, sal = 33)
[1] 2190.186
> guess_TA(temp = 12, sal = 33, region = "North Atlantic")
[1] 2214.74
> guess_TA(temp = 20, sal = 31:35)
[1] 2106.182 2151.092 2202.010 2252.564 2307.178
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("guess_TA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("guess_when")
> ### * guess_when
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: guess_when
> ### Title: Estimate when the O2 level will reach a defined level
> ### Aliases: guess_when
> 
> ### ** Examples
> 
> guess_when(past_o2 = rnorm(n = 10, mean = 100:91), past_time = 1:10, goal_o2 = 75, plot = FALSE)
[1] 27.32683
> guess_when(past_o2 = rnorm(n = 10, mean = 100:91, sd = 10), past_time = 1:10, goal_o2 = 75)
[1] 50.17602
> # Viewing the plot can be helpful to see how trustworthy the prediction is
> # when signal:noise is low.
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("guess_when", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("max_MO2")
> ### * max_MO2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Encoding: UTF-8
> 
> ### Name: max_MO2
> ### Title: Maximum MO2 supported by flow rate
> ### Aliases: max_MO2
> 
> ### ** Examples
> 
> max_MO2(flow_rate = 1)
[1] 1265.875
> 
> # What is the maximum MO2 organism I can place in my respirometer and still maintain at
> # least 75% air saturation when the intake fresh water is 1.5 LPM, 10 °C and 90% air saturated?
> max_MO2(flow_rate = 1.5, min_pO2 = 75, pO2_in = 90, temp = 10, sal = 0)
[1] 4755.543
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("max_MO2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mean_pH")
> ### * mean_pH
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mean_pH
> ### Title: Mean pH by [H+]
> ### Aliases: mean_pH
> 
> ### ** Examples
> 
> mean_pH(c(7, 8)) # 7.26 rather than 7.5!
[1] 7.259637
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mean_pH", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("min_flow")
> ### * min_flow
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Encoding: UTF-8
> 
> ### Name: min_flow
> ### Title: Minimum flow rate to support MO2
> ### Aliases: min_flow
> 
> ### ** Examples
> 
> min_flow(MO2 = 1000)
[1] 0.7899672
> 
> # What is the minimum flow rate required to maintain at least 75% air saturation in a
> # respirometer with an organism(s) with an oxygen consumption rate of 1000 umol/h
> # when the intake fresh water is 10 °C and 90% air saturated?
> min_flow(MO2 = 1000, min_pO2 = 75, pO2_in = 90, temp = 10, sal = 0)
[1] 0.3154214
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("min_flow", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("peri_pump")
> ### * peri_pump
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: peri_pump
> ### Title: Calculate peristaltic pump gaseous flow rate
> ### Aliases: peri_pump
> 
> ### ** Examples
> 
> peri_pump(mol = 0.5, species = 'O2', temp = 10, reg_pres = 5, reg_unit = "kPa")
[1] 11.05763
> # To flow 0.5 moles of O2, then flow 11.1 L.
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("peri_pump", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("predict_NH4")
> ### * predict_NH4
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predict_NH4
> ### Title: Predict NH4 concentration post-respiration
> ### Aliases: predict_NH4
> 
> ### ** Examples
> 
> predict_NH4(o2_drop = 25, o2_nh4_ratio = 10)
[1] 0.09514351
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predict_NH4", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("predict_pH")
> ### * predict_pH
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predict_pH
> ### Title: Predict pH post-respiration
> ### Aliases: predict_pH
> 
> ### ** Examples
> 
> predict_pH(end_o2 = 75, start_pH = 8.1)
$pH
[1] 8.013739

$pCO2
[1] 435.291

> predict_pH(start_o2 = 75, end_o2 = 50, start_pH = 7.96, temp = 15, sal = 33, RQ = 0.88)
$pH
[1] 7.814362

$pCO2
[1] 716.6227

> 
> # I know pH at the end was 7.8, but what was pH at the beginning?
> predict_pH(start_o2 = 75, end_o2 = 100, start_pH = 8.013536) # reverse the order
$pH
[1] 8.099814

$pCO2
[1] 340.8654

> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predict_pH", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.662 0.095 1.857 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
